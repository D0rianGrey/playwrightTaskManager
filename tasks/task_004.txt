# Task ID: 4
# Title: API Testing Framework Implementation
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Develop API testing capabilities using Playwright's request context, including request builders, response validators, and schema validation.
# Details:
1. Create API client base class:
   - Request builder pattern
   - Response handling and parsing
   - Error handling and retries

2. Implement request context management:
   - Session and authentication handling
   - Request interceptors and modifiers
   - Response interceptors and processors

3. Add JSON Schema validation:
   - Schema registry and management
   - Response validation against schemas
   - Custom validators for complex scenarios

4. Implement API mocking capabilities:
   - Mock server integration
   - Response mocking and stubbing
   - Conditional mocking based on request parameters

5. Create API test helpers:
   - Request chaining and dependencies
   - Data extraction and transformation
   - Assertion utilities for API responses

Example implementation:
```typescript
// BaseApiClient.ts
export class BaseApiClient {
  protected request: APIRequestContext;
  protected baseUrl: string;
  protected defaultHeaders: Record<string, string>;

  constructor(request: APIRequestContext, baseUrl: string) {
    this.request = request;
    this.baseUrl = baseUrl;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };
  }

  async get<T>(path: string, options?: ApiRequestOptions): Promise<ApiResponse<T>> {
    return this.sendRequest<T>('GET', path, options);
  }

  async post<T>(path: string, data?: any, options?: ApiRequestOptions): Promise<ApiResponse<T>> {
    return this.sendRequest<T>('POST', path, { ...options, data });
  }

  async put<T>(path: string, data?: any, options?: ApiRequestOptions): Promise<ApiResponse<T>> {
    return this.sendRequest<T>('PUT', path, { ...options, data });
  }

  async delete<T>(path: string, options?: ApiRequestOptions): Promise<ApiResponse<T>> {
    return this.sendRequest<T>('DELETE', path, options);
  }

  private async sendRequest<T>(
    method: string,
    path: string,
    options?: ApiRequestOptions
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseUrl}${path}`;
    const headers = { ...this.defaultHeaders, ...options?.headers };
    
    const requestOptions: APIRequestOptions = {
      headers,
      data: options?.data ? JSON.stringify(options.data) : undefined,
      params: options?.params,
      timeout: options?.timeout || 30000,
    };

    try {
      const response = await this.request[method.toLowerCase()](url, requestOptions);
      const body = await this.parseResponseBody<T>(response);
      
      return {
        status: response.status(),
        headers: response.headers(),
        body,
        raw: response
      };
    } catch (error) {
      // Handle and transform error
      throw new ApiError(`API request failed: ${error.message}`, error);
    }
  }

  private async parseResponseBody<T>(response: APIResponse): Promise<T> {
    const contentType = response.headers()['content-type'];
    if (contentType?.includes('application/json')) {
      return await response.json();
    }
    return await response.text() as unknown as T;
  }
}

// SchemaValidator.ts
export class SchemaValidator {
  private schemas: Map<string, object>;

  constructor() {
    this.schemas = new Map();
  }

  registerSchema(name: string, schema: object): void {
    this.schemas.set(name, schema);
  }

  validate<T>(data: T, schemaName: string): ValidationResult {
    const schema = this.schemas.get(schemaName);
    if (!schema) {
      throw new Error(`Schema '${schemaName}' not found`);
    }
    
    // Use Ajv or similar library to validate
    // Return validation result
    return { valid: true, errors: [] }; // Placeholder
  }
}
```

# Test Strategy:
1. Create unit tests for API client with mock responses
2. Test schema validation with valid and invalid responses
3. Verify request chaining and dependency handling
4. Test API mocking capabilities with various scenarios
5. Create integration tests against the demo API (https://documenter.getpostman.com/view/4012288/TzK2bEa8)
6. Validate error handling and retry mechanisms
